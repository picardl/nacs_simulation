%everything in SI!
%load constants
C = constants();

auToCmV = 1.648773e-41;

ns = 0:1:20;

T0 = 0; %Initial temp in Kelvin
E0 = 3/2*C.kb*T0;

% I = 2.5e10; %W / m^2. cooling depth
I = 0.44*2.5e10; %W / m^2. cooling depth

csPol = 1163.4*auToCmV;
molPol = 939.8*auToCmV;%au

mNaCs = C.m_nacs;
mCs = C.m_Cs;

fRadToU(m,fRad,w0)

UCs = (171.7,194.2)



 %MHz/(W/m^2)
 

% lambda = 1064e-9;
% k = 2*pi/lambda;
% w0 = lambda*1.17; %
% ItoU_mol = ItoU_Cs*molPol/csPol;
% 
% Umol = ItoU_mol*I;
% UCs = ItoU_Cs*I;
% 
% 
% 
% radFreq = sqrt(4*C.h.*Umol/(m*w0^2))/(2*pi);
% axFreq = sqrt(2*C.h.*Umol*lambda^2/(m*pi^2*w0^4))/(2*pi);
% 
% csFreq = sqrt(4*C.h.*UCs/(m*w0^2))/(2*pi);
% 
% %Get recoil energy
% wr = C.hbar.^2*k^2/(2*m);
% 
% lossRateI = 2.3e-6; %s^-1 / (W cm^-2). From our ground state paper
% lossRateU = lossRateI/ItoU_mol; %s^-1 / (Hz)
% 
% scatRateI = 54e-6; %s^-1 / (W cm^-2). From arxiv.org/pdf/1707.02168.pdf
% scatRateU = scatRateI/ItoU_mol; %s^-1 / (Hz)
% 
% ts = [0:1:200]*1e-3;
% 
% Es = E0 + wr*I*scatRateI*ts;
% Es_MHz = Es/1e6/(C.h);
% Ts = (2/3)*Es/C.kb;
% % plot(ts,Es_MHz);
% 
% figure(1)
% subplot(1,3,1)
% plot(ts,Ts*1e6);
% xlabel('time [s]')
% ylabel('Temperature [uK]')
% 
% nbars = exp(-C.hbar*2*pi*trapFreq./(C.kb*Ts))./(1-exp(-C.hbar*2*pi*trapFreq./(C.kb*Ts)));
% subplot(1,3,2)
% plot(ts,nbars)
% xlabel('time [s]')
% ylabel('nbar')
% 
% xMean = [];
% for i = 1:length(ts)
%     xMean(end+1) = x2(20,radFreq,Ts(i),m);
% end
% 
% figure(1)
% subplot(1,3,3)
% plot(ts,xMean*1e9)
% xlabel('time [s]')
% ylabel('sqrt(<x>) [nm]')
% 
% xMeanLow = [];
% for i = 1:length(ts)
%     xMeanLow(end+1) = x2(20,radFreq/sqrt(40),Ts(i),m);
% end
% figure(4)
% plot(ts,xMeanLow*1e9)
% xlabel('time [s]')
% ylabel('sqrt(<x>) [nm]')

function res = ItoU(pol,I) %Return trap depth in Hz for an intensity in W / m^2
    C = constants();
    res = 1/(2*C.eps0*C.c)*pol/C.h*I;
end

function res = freqsToWaist(fRad,fAx,lambda)
    res = sqrt(2*fRad*lambda)/(2*fAx*pi);
end

function res = fRadToU(m,fRad,w0) %Convert radial trap frequency to a trap depth
   res = m.*(2*pi.*fRad).^2.*w0.^2/4; 
end

function res = x2(nMax,trapFreq,T,m)
    C = constants();
    alpha = exp(-C.hbar*2*pi*trapFreq./(C.kb*T));
    pn = sqrt(1 - alpha).*alpha.^(0:nMax);
    xs = sqrt(C.hbar/(m*2*pi*trapFreq).*((0:nMax) + 1/2));
    res = sum(pn.*xs);
end